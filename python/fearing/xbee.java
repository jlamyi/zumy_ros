/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package fearing;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class xbee implements lcm.lcm.LCMEncodable
{
    public fearing.header header;
    public long rssi;
    public long addr;
 
    public xbee()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x67ebd03fb3e553dcL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(fearing.xbee.class))
            return 0L;
 
        classes.add(fearing.xbee.class);
        long hash = LCM_FINGERPRINT_BASE
             + fearing.header._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        this.header._encodeRecursive(outs); 
 
        outs.writeLong(this.rssi); 
 
        outs.writeLong(this.addr); 
 
    }
 
    public xbee(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public xbee(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static fearing.xbee _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        fearing.xbee o = new fearing.xbee();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.header = fearing.header._decodeRecursiveFactory(ins);
 
        this.rssi = ins.readLong();
 
        this.addr = ins.readLong();
 
    }
 
    public fearing.xbee copy()
    {
        fearing.xbee outobj = new fearing.xbee();
        outobj.header = this.header.copy();
 
        outobj.rssi = this.rssi;
 
        outobj.addr = this.addr;
 
        return outobj;
    }
 
}

